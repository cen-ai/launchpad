#!/usr/bin/env bash
#
# hrtool.sh
#
# This script will setup/build/run Hanson Robotics stack on you machine

set -e

if [[ ! $(lsb_release --codename --short) == "trusty" ]]; then
    echo "Error: Only Ubuntu 14.04 (trusty) is supported" >&2
    exit 1
fi

for i in $(env|grep ROS|cut -d= -f1); do
    unset $i
done

OPENCOG_REPOS=(cogutils atomspace opencog ros-behavior-scripting relex)

install_basic() {
    sudo apt-get -y update
    sudo apt-get -y install git
    sudo apt-get -y install wget
    sudo apt-get -y install python3-pip
    sudo apt-get -y install python-pip
    sudo apt-get -y install build-essential
    sudo apt-get -y install software-properties-common
}

install_ros() {
    sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list'
#    wget https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -O - | sudo apt-key add -
    sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net --recv-key 0xB01FA116
    sudo apt-get -y update
    sudo apt-get -y install ros-indigo-desktop
    sudo apt-get -y install ros-indigo-tf
    sudo apt-get -y install ros-indigo-driver-common
    sudo apt-get -y install ros-indigo-cv-bridge
    sudo apt-get -y install ros-indigo-image-transport
    sudo apt-get -y install ros-indigo-openni-camera
    sudo apt-get -y install ros-indigo-mjpeg-server
    sudo apt-get -y install ros-indigo-usb-cam
    sudo apt-get -y install ros-indigo-dynamixel-motor
    sudo apt-get -y install ros-indigo-robot-state-publisher
    sudo apt-get -y install ros-indigo-joint-state-publisher
    sudo apt-get -y install ros-indigo-rosbridge-server
    sudo apt-get -y install python-catkin-tools

    # Ready made messages to be utilized form opencv-apps repo.
    sudo apt-get -y install ros-indigo-opencv-apps
    # for camera calibration
    sudo apt-get -y install ros-indigo-image-proc
    # for blender to find ros packages
    sudo pip3 install rospkg catkin_pkg
    set +e
    sudo rosdep init
    rosdep update
    set -e
}

install_opencog_deps() {
    sudo apt-get -y install ccache
    wget http://raw.github.com/opencog/ocpkg/master/ocpkg -O octool
    chmod +rx octool
    ./octool -rdpv
    rm octool

    install_relex_deps
}

install_relex_deps() {
    sudo apt-get -y update
    sudo apt-get -y install build-essential python-dev swig zlib1g-dev unzip wget
    sudo apt-get -y install wordnet-dev wordnet-sense-index
    sudo apt-get -y install openjdk-7-jdk
    sudo apt-get -y install ant libcommons-logging-java libgetopt-java

    wget http://raw.github.com/opencog/ocpkg/master/ocpkg -O octool
    chmod +rx octool
    ./octool -l
    rm octool

    # Java WordNet Library
    wget http://downloads.sourceforge.net/project/jwordnet/jwnl/JWNL%201.4/jwnl14-rc2.zip
    unzip -o jwnl14-rc2.zip jwnl14-rc2/jwnl.jar
    sudo mv -v jwnl14-rc2/jwnl.jar /usr/local/share/java/
    rm -v jwnl14-rc2.zip && rmdir jwnl14-rc2
    sudo chmod -v 0644 /usr/local/share/java/jwnl.jar
}

install_other_deps() {
    sudo add-apt-repository -y ppa:irie/blender
    sudo apt-get -y update

    sudo apt-get -y install blender

    # For webui
    sudo pip2 install flask EasyProcess

    # For rosbridge_server
    sudo apt-get -y install python-bson

    # For pololu-motors
    # DO NOT UPGRADE WITH PIP
    sudo apt-get -y install python-serial

    # For Blender
    sudo apt-get -y install python3-numpy

    # For running scripts
    sudo apt-get -y install tmux

    # For Festival
    sudo apt-get -y install festival festival-dev
    # Install female voice
    mkdir -p ~/.hr/tts/festival/voices
    # Install female voice
    if [[ ! -f ~/.hr/tts/festival/voices/festvox_cmu_us_slt_arctic_hts.tar.gz ]]; then
        wget http://festvox.org/packed/festival/2.1/festvox_cmu_us_slt_arctic_hts.tar.gz -P ~/.hr/tts/festival/voices
    fi
    tar zxf ~/.hr/tts/festival/voices/festvox_cmu_us_slt_arctic_hts.tar.gz -C /tmp
    sudo cp -rT /tmp/festival/lib/voices /usr/share/festival/voices
    rm -rf /tmp/festival

    # For tts playing audio
    sudo apt-get -y install python-pyglet

    # For chatbot
    sudo apt-get -y install python-yaml

    # For blender_api_test
    sudo add-apt-repository -y ppa:mc3man/trusty-media
    sudo apt-get update
    sudo apt-get install -y ffmpeg
}

install_test_deps() {
    sudo apt-get -y install socat
    sudo apt-get -y install xdotool
}

install_vision_deps() {
    # For Dlib
    cd $HR_WORKSPACE/HEAD/src/vision
    #Tkinter error other wise.
    sudo pip2 install -I Pillow

    if [[ ! -d $HR_WORKSPACE/HEAD/src/vision/dlib/dlib-18.18 ]]; then
    wget http://dlib.net/files/dlib-18.18.tar.bz2

    tar -xf dlib-18.18.tar.bz2

    rm dlib-18.18.tar.bz2
    fi
    #TODO change this commands to clone() when they are forked in hansonrobotics repository once recusive option is added
    # Install dlib-models large file This is skiped as model in the openface are used to download the elements
    # git clone https://github.com/davisking/dlib-models.git

    # Install Torch
    if [ ! -d $HR_WORKSPACE/torch/.git ]
    then
    git clone https://github.com/torch/distro.git $HR_WORKSPACE/torch --recursive

    cd $HR_WORKSPACE/torch

    bash install-deps
    echo no | ./install.sh

    #Source. May be not needed.
    # source ~/.bashrc

    # Install lua packages in the torch file in scripts directory.

    #for NAME in dpnn nn optim csvigo; do luarocks install $NAME; done
    cd install/bin
    ./luarocks install nn
    ./luarocks install dpnn
    ./luarocks install image
    ./luarocks install optim
    ./luarocks install csvigo
    ./luarocks install sys
    else
    echo "Skipping Torch installation Because it's found in HEAD."
    fi
    cd $HR_WORKSPACE/HEAD/src/vision

    # Install openface

    # Dependencies for openface

    # This is to install scikit-images as the pip version requires cython0.23 which can't be installed otherwise.
    sudo apt-get -y install python-skimage
    for NAME in numpy pandas scipy scikit-learn; do sudo pip2 install $NAME; done

    if [ ! -d $HR_WORKSPACE/HEAD/src/vision/openface/.git ];
    then
    #TODO a checkout verison that works with the latest.
    git clone https://github.com/cmusatyalab/openface.git --recursive
    else
    echo "Skipping OpenFace Installation. Exists in vision"
    fi
    cd openface
    cd models

    # 150 Megabyes of data.
    if [ ! -f $HR_WORKSPACE/HEAD/src/vision/openface/models/dlib/shape_predictor_68_face_landmarks.dat ] ||
     [ ! -f $HR_WORKSPACE/HEAD/src/vision/openface/models/dlib/mean.csv ] || [ ! -f $HR_WORKSPACE/HEAD/src/vision/openface/models/dlib/std.csv ] ||
     [ ! -f $HR_WORKSPACE/HEAD/src/vision/openface/models/openface/nn4.small2.v1.t7 ]; then
    ./get-models.sh
    else
    echo "Models Exists. Skipped gettinf models for openface and dlib"
    fi

    # CMT and Emotime Libraries.


    # CppMT i
    cd $HR_WORKSPACE/HEAD/src/vision

    #TODO this needs to be moved to a new HR repository.
    if [ ! -d $HR_WORKSPACE/HEAD/src/vision/CppMT/.git ]
    then
    git clone https://github.com/tesYolan/CppMT.git
    cd CppMT
    git checkout wrapper
    cmake .
    make -j$(nproc)
    else
    echo "Pulling the latest form CppMT"
    cd $HR_WORKSPACE/HEAD/src/vision/CppMT/
    git checkout wrapper
    git pull origin wrapper
    cmake .
    make -j$(nproc)
    fi
    # Emotime Steps
    cd $HR_WORKSPACE/HEAD/src/vision

    #TODO this needs to be moved to a new HR repository
    if [ ! -d $HR_WORKSPACE/HEAD/src/vision/emotime/.git ]
    then
    git clone https://github.com/tesYolan/emotime.git
    cd emotime
    cd build
    cmake ..
    make -j$(nproc)
    else
    echo "Skipped Emotime Installation"
    fi
    cd $HR_WORKSPACE


}

check_or_create_ws() {
    if [[ -d $1 ]]; then
        export HR_WORKSPACE=$1
    else
        if [[ $1 ]]; then
            echo -n "The workspace $1 does not exist, create (Y/n)? "
            read -e create
            if [[ $create == "Y" || $create == "y" || $create == "" ]]; then
                mkdir -p $1
                echo "Workspace directory $1 is created"
                export HR_WORKSPACE=$1
            fi
            unset create
        fi
    fi
}

clone() {
    owner=$1
    repo=$2
    dest=${3-"."}/$repo
    # if ssh clone failed, then try https clone
    if [[ -d $dest ]]; then
        echo "$dest already exists"
    else
        git clone git@github.com:$owner/$repo.git $dest || git clone https://github.com/$owner/$repo.git $dest
    fi
}

get_opencog_src(){
    for repo in ${OPENCOG_REPOS[*]}
    do
        cd $HR_WORKSPACE
        clone hansonrobotics $repo opencog
    done
}

check_local_changes() {
    for repo in ${OPENCOG_REPOS[*]}
    do
        if [[ -d $HR_WORKSPACE/opencog/$repo ]]; then
            cd $HR_WORKSPACE/opencog/$repo
            branch=$(git rev-parse --abbrev-ref HEAD)
            if [[ $branch != 'master' ]]; then
                echo "HEAD branch is not master $(pwd)" 1>&2
                return 1
            fi
            if [[ $(git status -uno --porcelain|wc -c) != 0 ]]; then
                echo "Plese commit the change(s) $(pwd)" 1>&2
                echo $(git status --porcelain) 1>&2
                return 1
            fi
            if [[ $(git diff --name-only master origin/master|wc -c) != 0 ]]; then
                echo "Master branch is not synchronized with origin $(pwd)" 1>&2
                return 1
            fi
        fi
    done
    cd $HR_WORKSPACE
}

update_opencog() {
    local DEFAULT_BRANCH="master"
    for repo in ${OPENCOG_REPOS[*]}
    do
        cd $HR_WORKSPACE/opencog/$repo
        branch=$(git rev-parse --abbrev-ref HEAD)
        if [[ $branch != $DEFAULT_BRANCH ]]; then
            continue
        fi
        git pull origin $DEFAULT_BRANCH
    done
}

do_update_hr() {
    local DEFAULT_BRANCH="master"
    for repo in $PROJECT
    do
        cd $HR_WORKSPACE/$repo
        branch=$(git rev-parse --abbrev-ref HEAD)
        if [[ $branch != $DEFAULT_BRANCH ]]; then
            continue
        fi
        git pull origin $DEFAULT_BRANCH
    done
}

do_update_vision_tools() {

    #Update CMT

    local DEFAULT_BRANCH="wrapper"

    cd $HR_WORKSPACE/HEAD/src/vision/CppMT

    branch=$(git rev-parse --abbrev-ref HEAD)
    if [[ $branch != $DEFAULT_BRANCH ]]; then
        continue
    fi
    git pull origin $DEFAULT_BRANCH

    cmake .
    make -j$(nproc)

}
do_install_deps() {
    _do_install_deps
}

_do_install_deps() {
    install_basic
    install_ros
    install_opencog_deps
    install_other_deps
    install_vision_deps
}

do_get_hr_src() {
    cd $HR_WORKSPACE
    clone hansonrobotics $PROJECT
}

do_get_src() {
    # Check/add the github host key to ~/.ssh/known_hosts
    ssh -o StrictHostKeyChecking=no github.com || true
    do_get_hr_src
    get_opencog_src
}

do_dev_mode() {
    DOMAIN=${1-"opencog"}
    check_local_changes || exit 1
    echo "Switching to $DOMAIN repositories"
    for repo in ${OPENCOG_REPOS[*]}
    do
        cd $HR_WORKSPACE
        if [[ -d $HR_WORKSPACE/opencog/$repo ]]; then
            cd opencog/$repo
            git remote remove old || true
            git remote rename origin old
            git remote add -f origin https://github.com/$DOMAIN/$repo
            git branch master -u origin/master
            git reset --hard origin/master
        else
            clone $DOMAIN $repo opencog
        fi
    done
    update_opencog
}

undo_dev_mode() {
    do_dev_mode hansonrobotics
}

do_build_hr() {
    cd $HR_WORKSPACE/$PROJECT
    source /opt/ros/indigo/setup.bash
    if [[ ! -d .catkin_tools ]]; then
        catkin init
    fi
    #TODO remove items unnecessary here to take it all out.
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HR_WORKSPACE/HEAD/src/vision/CppMT:$HR_WORKSPACE/HEAD/src/vision/emotime/build/src
    #Needed for compiling emotime as it's dependent upon it for it being built.
    export LIBRARY_PATH=$LIBRARY_PATH:$HR_WORKSPACE/HEAD/src/vision/CppMT:$HR_WORKSPACE/HEAD/src/vision/emotime/build/src
    export DLIB_PATH=$HR_WORKSPACE/HEAD/src/vision/dlib-18.18
    cd $DLIB_PATH && python setup.py build
    cd $HR_WORKSPACE/$PROJECT
    include_dirs=($HR_WORKSPACE/HEAD/src/vision/emotime/src/{facedetector,utils,gaborbank,detector,training})
    include_path=$(printf "%s:" "${include_dirs[@]}")
    export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$HR_WORKSPACE/HEAD/src/vision/CppMT:$HR_WORKSPACE/HEAD/src/vision/emotime/include:$include_path
    catkin clean -y || catkin clean -a
    catkin build --force-cmake -j$(nproc) --no-status
    TARGET=$HR_WORKSPACE/$PROJECT/devel/lib/python2.7/dist-packages/
    pip2 install -t $TARGET $HR_WORKSPACE/$PROJECT/src/hardware/pololu-motors --upgrade --no-deps
    pip3 install -t $TARGET $HR_WORKSPACE/$PROJECT/src/blender_api_msgs --upgrade --no-deps
}

do_single_package() {

    # With build a package.

    # If package cmt_package.

    cd $HR_WORKSPACE/$PROJECT
    source /opt/ros/indigo/setup.bash
    if [[ ! -d .catkin_tools ]]; then
        catkin init
    fi

    include_dirs=($HR_WORKSPACE/HEAD/src/vision/emotime/src/{facedetector,utils,gaborbank,detector,training})
    include_path=$(printf "%s:" "${include_dirs[@]}")
    export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$HR_WORKSPACE/HEAD/src/vision/CppMT:$HR_WORKSPACE/HEAD/src/vision/emotime/include:$include_path

    if [ "$1" == "cmt_tracker" ]; then
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HR_WORKSPACE/HEAD/src/vision/CppMT:$HR_WORKSPACE/HEAD/src/vision/emotime/build/src
    #Needed for compiling emotime as it's dependent upon it for it being built.
    export LIBRARY_PATH=$LIBRARY_PATH:$HR_WORKSPACE/HEAD/src/vision/CppMT:$HR_WORKSPACE/HEAD/src/vision/emotime/build/src
    catkin build cmt_tracker_msgs cmt_tracker

    else

    catkin build $1

    fi

}

build_opencog() {
    for repo in ${OPENCOG_REPOS[*]}
    do
        if [[ $repo != 'relex' ]]; then
            if [[ ! -d $HR_WORKSPACE/opencog/$repo/build ]]; then
                mkdir $HR_WORKSPACE/opencog/$repo/build
            fi
            cd $HR_WORKSPACE/opencog/$repo/build && cmake ..  && make -j$(nproc) && sudo make install
        else
            cd $HR_WORKSPACE/opencog/$repo && JAVA_TOOL_OPTIONS=-Dfile.encoding=UTF8 ant build && sudo ant install
        fi
    done
}

do_build() {
    build_opencog
    do_build_hr
}

do_test() {
    bash $HR_WORKSPACE/$PROJECT/scripts/test.sh
}

do_update() {
    update_opencog
    do_update_hr
    do_update_vision_tools
}

do_run() {
    while [[ $# > 0 ]]; do
        echo "Running $1"
        $1
        shift
    done
}

#######

show_help() {
cat << EOF
Usage: $0 OPTION

-i      Install dependencies.
-g      Get HR source code.
-G      Get all source code including OpenCog and HR.
-u      Update HR source code.
-v      Update Vision Related dependencies.
-U      Update all source code including OpenCog and HR.
-b      Build HR source code.
-B      Build HR and OpenCog source code.
-t      Run tests.
-w      Set Hanson Robotics workspace.
-p      Print Hanson Robotics workspace.
-r      Run custom functions.
-d      Developer mode. Using latest OpenCog stack.
-h      Print this help.
-s      Build a single package specified.

EOF
}

parse_opts() {

    while getopts "hw:igGbBuUvtprs:d" opt; do

        case $opt in
        h)
            show_help
            exit 0
            ;;
        w) HR_WORKSPACE=$OPTARG ;;
        i) INSTALL_DEPENDENCIES=1 ;;
        g) GET_HR_SOURCE_CODE=1 ;;
        G) GET_SOURCE_CODE=1 ;;
        b) BUILD_HR_SOURCE_CODE=1 ;;
        B) BUILD_SOURCE_CODE=1 ;;
        u) UPDATE_HR_SOURCE_CODE=1 ;;
        U) UPDATE_SOURCE_CODE=1 ;;
        v) UPDATE_VISION_CODE=1 ;;
        t) RUN_TESTS=1 ;;
        p) PRINT_HR_WORKSPACE=1 ;;
        s) BUILD_SINGLE_PKG=1  && CUSTOM_FUNCTIONS=$OPTARG ;;
        r) RUN_CUSTOM_FUNCTIONS=1 && CUSTOM_FUNCTIONS=$OPTARG ;;
        d) DEVELOPER_MODE=1 ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            show_help
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            show_help
            exit 1
            ;;
        esac
    done
    shift $((OPTIND-1))
}

set_ws() {
    if [[ -z $HR_WORKSPACE ]]; then
        if [[ -f $HR_ENVFILE_PATH ]]; then
            . $HR_ENVFILE_PATH
        else
            HR_WORKSPACE=$DEFAULT_HR_WORKSPACE
        fi
    fi
    if [[ ! "$HR_WORKSPACE" = /* ]]; then
        HR_WORKSPACE=$(pwd)/$HR_WORKSPACE
    fi
    check_or_create_ws $HR_WORKSPACE
    if [[ ! -d $HR_WORKSPACE ]]; then
        echo "HR_WORKSPACE is incorrect, exit"
        exit 1;
    fi
    if [[ ! -d $(dirname $HR_ENVFILE_PATH) ]]; then mkdir -p $(dirname $HR_ENVFILE_PATH); fi
    echo export HR_WORKSPACE=$HR_WORKSPACE > $HR_ENVFILE_PATH
    cp $HR_ENVFILE_PATH $BASEDIR >/dev/null 2>&1 # For compatibility
}

execute() {
    parse_opts $@
    set_ws
    if [[ $INSTALL_DEPENDENCIES ]]; then do_install_deps; fi
    if [[ $GET_HR_SOURCE_CODE ]]; then do_get_hr_src; fi
    if [[ $GET_SOURCE_CODE ]]; then do_get_src; fi
    if [[ $DEVELOPER_MODE ]]; then do_dev_mode ; fi
    if [[ $UPDATE_HR_SOURCE_CODE ]]; then do_update_hr ; fi
    if [[ $UPDATE_SOURCE_CODE ]]; then do_update ; fi
    if [[ $BUILD_HR_SOURCE_CODE ]]; then do_build_hr; fi
    if [[ $UPDATE_VISION_CODE ]]; then do_update_vision_tools; fi
    if [[ $BUILD_SOURCE_CODE ]]; then do_build; fi
    if [[ $RUN_TESTS ]]; then do_test; fi
    if [[ $PRINT_HR_WORKSPACE ]]; then echo HR_WORKSPACE=$HR_WORKSPACE ; fi
    if [[ $BUILD_SINGLE_PKG ]]; then do_single_package $CUSTOM_FUNCTIONS ; fi
    if [[ $RUN_CUSTOM_FUNCTIONS ]]; then do_run $CUSTOM_FUNCTIONS ; fi
}

BASEDIR=$(dirname $(readlink -f ${BASH_SOURCE[0]}))
eval DEFAULT_HR_WORKSPACE=~/hansonrobotics
eval HR_ENVFILE_PATH=~/.hr/env.sh
PROJECT=HEAD
export PATH=/usr/lib/ccache:$PATH

############

if [[ ! $BASH_SOURCE == $0 ]]; then return; fi

if [ $# -eq 0 ] ; then show_help; exit 0; fi

execute $@
